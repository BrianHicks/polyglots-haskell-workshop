var _user$project$Main$outputBox = function (m) {
	var innerHTML = A2(_elm_lang$core$Maybe$withDefault, '', m.outputData);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h2,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Preview'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$iframe,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$srcdoc(innerHTML),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$isNothing = function (m) {
	var _p0 = m;
	if (_p0.ctor === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Main$stringifyErr = function (e) {
	var _p1 = e;
	switch (_p1.ctor) {
		case 'BadUrl':
			return A2(_elm_lang$core$Basics_ops['++'], 'Bad URL', _p1._0);
		case 'Timeout':
			return 'Request Timeout';
		case 'NetworkError':
			return 'Network Error';
		case 'BadStatus':
			return 'Bad Status';
		default:
			return 'Bad Payload';
	}
};
var _user$project$Main$mkModel = {
	fmt: _elm_lang$core$Maybe$Just('markdown'),
	inputData: '',
	tickCount: 0,
	outputData: _elm_lang$core$Maybe$Nothing,
	knownFormats: _elm_lang$core$Maybe$Nothing,
	hasChanges: false
};
var _user$project$Main$defaultFormatList = {
	ctor: '::',
	_0: 'markdown',
	_1: {ctor: '[]'}
};
var _user$project$Main$previewURL = function (fmt) {
	return A2(_elm_lang$core$Basics_ops['++'], '/render?format=', fmt);
};
var _user$project$Main$newRenderRequest = F2(
	function (s, fmt) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: _user$project$Main$previewURL(fmt),
				body: A2(_elm_lang$http$Http$stringBody, '', s),
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _user$project$Main$formatListURL = '/supportedformats';
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {fmt: a, inputData: b, tickCount: c, outputData: d, knownFormats: e, hasChanges: f};
	});
var _user$project$Main$PreviewUpdateMsg = function (a) {
	return {ctor: 'PreviewUpdateMsg', _0: a};
};
var _user$project$Main$updatePreview = F2(
	function (s, fmt) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$PreviewUpdateMsg,
			A2(_user$project$Main$newRenderRequest, s, fmt));
	});
var _user$project$Main$FormatUpdateMsg = function (a) {
	return {ctor: 'FormatUpdateMsg', _0: a};
};
var _user$project$Main$fetchKnownFormats = A2(
	_elm_lang$http$Http$send,
	_user$project$Main$FormatUpdateMsg,
	A2(
		_elm_lang$http$Http$get,
		_user$project$Main$formatListURL,
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'SelectFormat':
				var _p3 = _p2._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							fmt: _elm_lang$core$Maybe$Just(_p3),
							hasChanges: true
						}),
					_1: A2(_user$project$Main$updatePreview, model.inputData, _p3)
				};
			case 'UpdateContent':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{tickCount: 0, inputData: _p2._0, hasChanges: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Tick':
				var newCnt = model.tickCount + 1;
				var f = ((_elm_lang$core$Native_Utils.cmp(newCnt, 1) > 0) && (_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$String$isEmpty(model.inputData),
					false) && model.hasChanges)) ? A2(
					_user$project$Main$updatePreview,
					model.inputData,
					A2(_elm_lang$core$Maybe$withDefault, 'markdown', model.fmt)) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{tickCount: newCnt}),
					_1: f
				};
			case 'FormatUpdateMsg':
				if (_p2._0.ctor === 'Err') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{knownFormats: _elm_lang$core$Maybe$Nothing}),
						_1: _user$project$Main$fetchKnownFormats
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								knownFormats: _elm_lang$core$Maybe$Just(_p2._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				if (_p2._0.ctor === 'Err') {
					var msg = _user$project$Main$stringifyErr(_p2._0._0);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								tickCount: 0,
								hasChanges: false,
								outputData: _elm_lang$core$Maybe$Just(msg)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								tickCount: 0,
								outputData: _elm_lang$core$Maybe$Just(_p2._0._0),
								hasChanges: false
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$mkModel, _1: _user$project$Main$fetchKnownFormats};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, 200 * _elm_lang$core$Time$millisecond, _user$project$Main$Tick);
};
var _user$project$Main$UpdateContent = function (a) {
	return {ctor: 'UpdateContent', _0: a};
};
var _user$project$Main$inputBox = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h2,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Input'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$textarea,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateContent),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$SelectFormat = function (a) {
	return {ctor: 'SelectFormat', _0: a};
};
var _user$project$Main$formatButton = function (s) {
	return A2(
		_elm_lang$html$Html$label,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'padding', _1: '20px'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('radio'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$name('format'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Main$SelectFormat(s)),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(s),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$formatDiv = function (m) {
	var fmts = m.knownFormats;
	var btns = A2(
		_elm_lang$core$List$map,
		_user$project$Main$formatButton,
		A2(
			_elm_lang$core$Maybe$withDefault,
			{
				ctor: '::',
				_0: 'markdown',
				_1: {ctor: '[]'}
			},
			fmts));
	var warning = _user$project$Main$isNothing(fmts) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Cannot fetch list of supported formats. Defaulting to \'markdown\''),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{ctor: '[]'});
	var s = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: warning,
			_1: {ctor: '[]'}
		},
		btns);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Select Format to Preview'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					s),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$view = function (m) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$Main$formatDiv(m),
			_1: {
				ctor: '::',
				_0: _user$project$Main$inputBox,
				_1: {
					ctor: '::',
					_0: _user$project$Main$outputBox(m),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
